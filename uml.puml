@startuml
interface com.urise.webapp.sql.SqlExecute {
~ T execute(PreparedStatement)
}
class com.urise.webapp.storage.MapStorage {
- Map<String,Resume> storage
+ void clear()
+ int size()
# void doUpdate(Resume,String)
# void doSave(Resume,String)
# void doDelete(String)
# Resume doGet(String)
+ List<Resume> doGetAll()
# String getSearchKey(String)
# boolean isExist(String)
}
class com.urise.webapp.storage.SqlStorage {
+ SqlHelper sqlHelper
+ void clear()
+ Resume get(String)
+ void update(Resume)
+ void save(Resume)
+ void delete(String)
+ List<Resume> getAllSorted()
+ int size()
+ void insertContacts(Connection,Resume)
+ void setContact(ResultSet,Resume)
}
class com.urise.webapp.model.Period {
- {static} long serialVersionUID
- LocalDate startDate
- LocalDate endDate
- String title
- String description
+ LocalDate getStartDate()
+ LocalDate getEndDate()
+ String getTitle()
+ String getDescription()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.urise.webapp.util.MainStreams {
- {static} int[] intArrays
- {static} List<Integer> integerList
+ {static} void main(String[])
- {static} int minValue(int[])
- {static} List<Integer> oddOrEven(List<Integer>)
}
class com.urise.webapp.util.DateUtil {
+ {static} LocalDate NOW
}
class com.urise.webapp.MainFile {
+ {static} void main(String[])
+ {static} void dirRecursion(File,int)
+ {static} String indented(int,String)
}
abstract class com.urise.webapp.storage.AbstractArrayStorage {
# {static} int STORAGE_LIMIT
# Resume[] storage
# int size
+ void clear()
+ int size()
# void doUpdate(Resume,Integer)
# void doSave(Resume,Integer)
# void doDelete(Integer)
# Resume doGet(Integer)
+ List<Resume> doGetAll()
# boolean isExist(Integer)
# {abstract}void saveResume(Resume,int)
# {abstract}void deleteResume(int)
}
class com.urise.webapp.model.ListSection {
- {static} long serialVersionUID
- List<String> list
+ List<String> getList()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.urise.webapp.model.OrganizationSection {
- {static} long serialVersionUID
- List<Organization> experience
+ List<Organization> getExperienceList()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
enum com.urise.webapp.model.SectionType {
+  PERSONAL
+  OBJECTIVE
+  ACHIEVEMENT
+  QUALIFICATIONS
+  EXPERIENCE
+  EDUCATION
- String title
+ String getTitle()
}
abstract class com.urise.webapp.storage.AbstractStorage {
- {static} Logger LOG
# {static} Comparator<Resume> RESUME_COMPARATOR
+ void update(Resume)
+ void save(Resume)
+ void delete(String)
+ Resume get(String)
+ List<Resume> getAllSorted()
# SK getExistingSearchKey(String)
# SK getNotExistingSearchKey(String)
# {abstract}void doUpdate(Resume,SK)
# {abstract}void doSave(Resume,SK)
# {abstract}void doDelete(SK)
# {abstract}Resume doGet(SK)
# {abstract}List<Resume> doGetAll()
# {abstract}SK getSearchKey(String)
# {abstract}boolean isExist(SK)
}
class com.urise.webapp.MainTestArrayStorage {
- {static} Storage ARRAY_STORAGE
- {static} Storage ARRAY_STORAGE1
- {static} Storage ARRAY_STORAGE0
- {static} Storage ARRAY_STORAGE2
- {static} Storage ARRAY_STORAGE3
+ {static} void main(String[])
~ {static} void printAll()
}
class com.urise.webapp.model.Resume {
- {static} long serialVersionUID
- String uuid
- String fullName
- Map<ContactType,String> contacts
- Map<SectionType,Section> sections
+ String getUuid()
+ String getFullName()
+ Map<ContactType,String> getContacts()
+ Map<SectionType,Section> getSections()
+ void setContact(ContactType,String)
+ void setSection(SectionType,Section)
+ String toString()
+ boolean equals(Object)
+ int hashCode()
+ int compareTo(Resume)
}
class com.urise.webapp.util.XmlParser {
- Marshaller marshaller
- Unmarshaller unmarshaller
+ T unmarshall(Reader)
+ void marshall(Object,Writer)
}
class com.urise.webapp.storage.serializer.ObjectStreamSerializer {
+ void doWrite(Resume,OutputStream)
+ Resume doRead(InputStream)
}
class com.urise.webapp.storage.FileStorage {
- File directory
- StreamSerializer streamSerializer
+ void clear()
+ int size()
# File getSearchKey(String)
# boolean isExist(File)
# void doUpdate(Resume,File)
# void doSave(Resume,File)
# Resume doGet(File)
# void doDelete(File)
# List<Resume> doGetAll()
- File[] getFileArray()
}
class com.urise.webapp.util.LocalDateAdapter {
+ LocalDate unmarshal(String)
+ String marshal(LocalDate)
}
class com.urise.webapp.MainConcurrency {
+ {static} int THREADS_NUMBER
- int counter
- AtomicInteger atomicCounter
- {static} ReentrantReadWriteLock reentrantReadWriteLock
- {static} Lock WRITE_LOCK
- {static} Lock READ_LOCK
- {static} ThreadLocal<SimpleDateFormat> threadLocal
+ {static} void main(String[])
- {static} void deadLock(Object,Object)
- void inc()
}
class com.urise.webapp.model.Organization {
- {static} long serialVersionUID
- String name
- String website
- List<Period> period
+ String getName()
+ String getWebsite()
+ List<Period> getPeriod()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.urise.webapp.sql.ExceptionUtil {
+ {static} StorageException convertException(SQLException)
}
class com.urise.webapp.util.JsonParser {
- {static} Gson GSON
+ {static} T read(Reader,Class<T>)
+ {static} void write(T,Writer)
}
class com.urise.webapp.storage.serializer.XmlStreamSerializer {
- XmlParser xmlParser
+ void doWrite(Resume,OutputStream)
+ Resume doRead(InputStream)
}
interface com.urise.webapp.storage.serializer.StreamSerializer {
~ void doWrite(Resume,OutputStream)
~ Resume doRead(InputStream)
}
class com.urise.webapp.storage.ListStorage {
- List<Resume> storage
+ void clear()
+ int size()
# void doUpdate(Resume,Integer)
# void doSave(Resume,Integer)
# void doDelete(Integer)
# Resume doGet(Integer)
+ List<Resume> doGetAll()
# Integer getSearchKey(String)
# boolean isExist(Integer)
}
class com.urise.webapp.model.TextSection {
- {static} long serialVersionUID
- String content
+ String getContent()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.urise.webapp.storage.serializer.JsonStreamSerializer {
+ void doWrite(Resume,OutputStream)
+ Resume doRead(InputStream)
}
class com.urise.webapp.exception.StorageException {
+ String uuid
+ String getUuid()
}
class com.urise.webapp.MainStreams {
- {static} int[] intArrays
- {static} List<Integer> integerList
+ {static} void main(String[])
- {static} int minValue()
- {static} List<Integer> oddOrEven()
}
interface com.urise.webapp.storage.Storage {
~ void clear()
~ void update(Resume)
~ void save(Resume)
~ void delete(String)
~ Resume get(String)
~ List<Resume> getAllSorted()
~ int size()
}
interface com.urise.webapp.sql.ConnectionFactory {
~ Connection getConnection()
}
class com.urise.webapp.DeadlockExample {
- {static} Lock rightLock
- {static} Lock leftLock
+ {static} void main(String[])
- void operation(Lock,Lock)
}
class com.urise.webapp.storage.SortedArrayStorage {
- {static} Comparator<Resume> RESUME_COMPARATOR
# void saveResume(Resume,int)
# void deleteResume(int)
# Integer getSearchKey(String)
}
class com.urise.webapp.storage.serializer.DataStreamSerializer {
+ void doWrite(Resume,OutputStream)
+ Resume doRead(InputStream)
- void write(DataOutputStream,Collection<T>,Write<T>)
- void writeLocalDate(DataOutputStream,LocalDate)
- void readPoint(DataInputStream,ReadElement)
- Section readSection(DataInputStream,SectionType)
- List<T> readList(DataInputStream,ReadList<T>)
}
interface com.urise.webapp.storage.serializer.DataStreamSerializer$Write {
~ void writeResume(T)
}
interface com.urise.webapp.storage.serializer.DataStreamSerializer$ReadElement {
~ void read()
}
interface com.urise.webapp.storage.serializer.DataStreamSerializer$ReadList {
~ T readList()
}
class com.urise.webapp.storage.PathStorage {
- Path directory
- StreamSerializer streamSerializer
+ void clear()
+ int size()
# Path getSearchKey(String)
# void doUpdate(Resume,Path)
# boolean isExist(Path)
# void doSave(Resume,Path)
# Resume doGet(Path)
# void doDelete(Path)
# List<Resume> doGetAll()
- Stream<Path> getFilesList()
- String getFileName(Path)
}
interface com.urise.webapp.sql.SqlTransaction {
~ T execute(Connection)
}
class com.urise.webapp.storage.ArrayStorage {
# void saveResume(Resume,int)
# void deleteResume(int)
# Integer getSearchKey(String)
}
class com.urise.webapp.util.JsonSectionAdapter {
- {static} String CLASSNAME
- {static} String INSTANCE
+ T deserialize(JsonElement,Type,JsonDeserializationContext)
+ JsonElement serialize(T,Type,JsonSerializationContext)
}
enum com.urise.webapp.model.ContactType {
+  TELEPHONE
+  SKYPE
+  MAIL
+  LINKEDIN
+  GITHUB
+  STACKOVERFLOW
+  HOMEPAGE
- String title
+ String getTitle()
}
abstract class com.urise.webapp.model.Section {
}
class com.urise.webapp.exception.NotExistStorageException {
}
class com.urise.webapp.storage.MapResumeStorage {
- Map<String,Resume> storage
+ void clear()
+ int size()
# void doUpdate(Resume,Resume)
# void doSave(Resume,Resume)
# void doDelete(Resume)
# Resume doGet(Resume)
# List<Resume> doGetAll()
# Resume getSearchKey(String)
# boolean isExist(Resume)
}
class com.urise.webapp.exception.ExistStorageException {
}
class com.urise.webapp.MainReflection {
+ {static} void main(String[])
}
class com.urise.webapp.Config {
- {static} File PROPS
- {static} Config INSTANCE
- File storageDir
- Storage storage
+ {static} Config get()
+ File getStorageDir()
+ Storage getStorage()
}


com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.MapStorage
com.urise.webapp.storage.Storage <|.. com.urise.webapp.storage.SqlStorage
java.io.Serializable <|.. com.urise.webapp.model.Period
com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.AbstractArrayStorage
com.urise.webapp.model.Section <|-- com.urise.webapp.model.ListSection
com.urise.webapp.model.Section <|-- com.urise.webapp.model.OrganizationSection
com.urise.webapp.storage.Storage <|.. com.urise.webapp.storage.AbstractStorage
com.urise.webapp.model.Comparable <|.. com.urise.webapp.model.Resume
java.io.Serializable <|.. com.urise.webapp.model.Resume
com.urise.webapp.storage.serializer.StreamSerializer <|.. com.urise.webapp.storage.serializer.ObjectStreamSerializer
com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.FileStorage
javax.xml.bind.annotation.adapters.XmlAdapter <|-- com.urise.webapp.util.LocalDateAdapter
java.io.Serializable <|.. com.urise.webapp.model.Organization
com.urise.webapp.storage.serializer.StreamSerializer <|.. com.urise.webapp.storage.serializer.XmlStreamSerializer
com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.ListStorage
com.urise.webapp.model.Section <|-- com.urise.webapp.model.TextSection
com.urise.webapp.storage.serializer.StreamSerializer <|.. com.urise.webapp.storage.serializer.JsonStreamSerializer
com.urise.webapp.exception.RuntimeException <|-- com.urise.webapp.exception.StorageException
com.urise.webapp.storage.AbstractArrayStorage <|-- com.urise.webapp.storage.SortedArrayStorage
com.urise.webapp.storage.serializer.StreamSerializer <|.. com.urise.webapp.storage.serializer.DataStreamSerializer
com.urise.webapp.storage.serializer.DataStreamSerializer +.. com.urise.webapp.storage.serializer.DataStreamSerializer$Write
com.urise.webapp.storage.serializer.DataStreamSerializer +.. com.urise.webapp.storage.serializer.DataStreamSerializer$ReadElement
com.urise.webapp.storage.serializer.DataStreamSerializer +.. com.urise.webapp.storage.serializer.DataStreamSerializer$ReadList
com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.PathStorage
com.urise.webapp.storage.AbstractArrayStorage <|-- com.urise.webapp.storage.ArrayStorage
com.urise.webapp.util.JsonSerializer <|.. com.urise.webapp.util.JsonSectionAdapter
com.urise.webapp.util.JsonDeserializer <|.. com.urise.webapp.util.JsonSectionAdapter
java.io.Serializable <|.. com.urise.webapp.model.Section
com.urise.webapp.exception.StorageException <|-- com.urise.webapp.exception.NotExistStorageException
com.urise.webapp.storage.AbstractStorage <|-- com.urise.webapp.storage.MapResumeStorage
com.urise.webapp.exception.StorageException <|-- com.urise.webapp.exception.ExistStorageException
@enduml